version: '3'

volumes:
  postgres_volume_local:
  postgres_volume_prod:
  redis_volume_local:
  redis_volume_prod:
  prometheus_data:
  grafana_data:

services:
  auth-local:
    environment:
      - CONFIG_PATH=local.env
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "50051:50051"
      - "8080:8080"
      - "8090:8090"
      - "2112:2112"
    volumes:
      - ./logs:/app/logs
    depends_on:
      - pg-local
      - redis-local
      - kafka1
      - kafka2
      - kafka3

  auth-prod:
    image: "${REGISTRY}/${AUTH_IMAGE_NAME}:${TAG_NAME}"
    environment:
      - CONFIG_PATH=prod.env
    ports:
      - "50052:50052"
      - "8080:8080"
      - "8090:8090"
      - "2112:2112"
    volumes:
      - ./logs:/app/logs
    depends_on:
      - pg-prod
      - redis-prod
      - kafka1
      - kafka2
      - kafka3

  pg-local:
    image: postgres:14-alpine3.17
    env_file:
      - local.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_volume_local:/var/lib/postgresql/data

  pg-prod:
    image: postgres:14-alpine3.17
    env_file:
      - prod.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_volume_prod:/var/lib/postgresql/data

  migrator-local:
    build:
      context: .
      dockerfile: migration_local.Dockerfile
    restart: on-failure
    environment:
      DB_HOST: pg-local
    depends_on:
      - pg-local

  migrator-prod:
    image: "${REGISTRY}/${MIGRATOR_IMAGE_NAME}:${TAG_NAME}"
    build:
      context: .
      dockerfile: migration_prod.dockerfile
    restart: on-failure
    environment:
      db_host: pg-prod
    depends_on:
      - pg-prod

  redis-local:
    image: redis:7.2.5-alpine3.20
    container_name: redis-container
    ports:
      - "6379:6379"
    volumes:
      - redis_volume_local:/data

  redis-prod:
    image: redis:7.2.5-alpine3.20
    container_name: redis-container
    ports:
      - "6379:6379"
    volumes:
      - redis_volume_prod:/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka1:
    image: confluentinc/cp-kafka:7.6.1
    hostname: kafka1
    container_name: kafka1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://kafka1:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3

  kafka2:
    image: confluentinc/cp-kafka:7.6.1
    hostname: kafka2
    container_name: kafka2
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29093,PLAINTEXT_HOST://kafka2:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3

  kafka3:
    image: confluentinc/cp-kafka:7.6.1
    hostname: kafka3
    container_name: kafka3
    depends_on:
      - zookeeper
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:29094,PLAINTEXT_HOST://kafka3:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.2
    ports:
      - "8082:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"

  prometheus:
    image: prom/prometheus:v2.37.9
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alerts.yml:/etc/prometheus/alerts.yml

  grafana:
    image: grafana/grafana-oss:10.0.3
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana

  jaeger:
    image: jaegertracing/all-in-one:1.48
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp" # jaeger-client
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686" # web
      - "14268:14268"
      - "9411:9411"
